// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get curator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Collected extends ethereum.Event {
  get params(): Collected__Params {
    return new Collected__Params(this);
  }
}

export class Collected__Params {
  _event: Collected;

  constructor(event: Collected) {
    this._event = event;
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get tokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ParameterUpdated extends ethereum.Event {
  get params(): ParameterUpdated__Params {
    return new ParameterUpdated__Params(this);
  }
}

export class ParameterUpdated__Params {
  _event: ParameterUpdated;

  constructor(event: ParameterUpdated) {
    this._event = event;
  }

  get param(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class SetController extends ethereum.Event {
  get params(): SetController__Params {
    return new SetController__Params(this);
  }
}

export class SetController__Params {
  _event: SetController;

  constructor(event: SetController) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Signalled extends ethereum.Event {
  get params(): Signalled__Params {
    return new Signalled__Params(this);
  }
}

export class Signalled__Params {
  _event: Signalled;

  constructor(event: Signalled) {
    this._event = event;
  }

  get curator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get subgraphDeploymentID(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get signal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get curationTax(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Curation__mintResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Curation__poolsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;

  constructor(value0: BigInt, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class Curation__tokensToSignalResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Curation extends ethereum.SmartContract {
  static bind(address: Address): Curation {
    return new Curation("Curation", address);
  }

  addressCache(param0: Bytes): Address {
    let result = super.call("addressCache", "addressCache(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_addressCache(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressCache",
      "addressCache(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bondingCurve(): Address {
    let result = super.call("bondingCurve", "bondingCurve():(address)", []);

    return result[0].toAddress();
  }

  try_bondingCurve(): ethereum.CallResult<Address> {
    let result = super.tryCall("bondingCurve", "bondingCurve():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burn(
    _subgraphDeploymentID: Bytes,
    _signalIn: BigInt,
    _tokensOutMin: BigInt
  ): BigInt {
    let result = super.call("burn", "burn(bytes32,uint256,uint256):(uint256)", [
      ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
      ethereum.Value.fromUnsignedBigInt(_signalIn),
      ethereum.Value.fromUnsignedBigInt(_tokensOutMin)
    ]);

    return result[0].toBigInt();
  }

  try_burn(
    _subgraphDeploymentID: Bytes,
    _signalIn: BigInt,
    _tokensOutMin: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burn",
      "burn(bytes32,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
        ethereum.Value.fromUnsignedBigInt(_signalIn),
        ethereum.Value.fromUnsignedBigInt(_tokensOutMin)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  curationTaxPercentage(): BigInt {
    let result = super.call(
      "curationTaxPercentage",
      "curationTaxPercentage():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_curationTaxPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "curationTaxPercentage",
      "curationTaxPercentage():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defaultReserveRatio(): BigInt {
    let result = super.call(
      "defaultReserveRatio",
      "defaultReserveRatio():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_defaultReserveRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defaultReserveRatio",
      "defaultReserveRatio():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurationPoolSignal(_subgraphDeploymentID: Bytes): BigInt {
    let result = super.call(
      "getCurationPoolSignal",
      "getCurationPoolSignal(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );

    return result[0].toBigInt();
  }

  try_getCurationPoolSignal(
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurationPoolSignal",
      "getCurationPoolSignal(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurationPoolTokens(_subgraphDeploymentID: Bytes): BigInt {
    let result = super.call(
      "getCurationPoolTokens",
      "getCurationPoolTokens(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );

    return result[0].toBigInt();
  }

  try_getCurationPoolTokens(
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurationPoolTokens",
      "getCurationPoolTokens(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_subgraphDeploymentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCuratorSignal(_curator: Address, _subgraphDeploymentID: Bytes): BigInt {
    let result = super.call(
      "getCuratorSignal",
      "getCuratorSignal(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_curator),
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCuratorSignal(
    _curator: Address,
    _subgraphDeploymentID: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCuratorSignal",
      "getCuratorSignal(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_curator),
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isCurated(_subgraphDeploymentID: Bytes): boolean {
    let result = super.call("isCurated", "isCurated(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_subgraphDeploymentID)
    ]);

    return result[0].toBoolean();
  }

  try_isCurated(_subgraphDeploymentID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCurated", "isCurated(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_subgraphDeploymentID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minimumCurationDeposit(): BigInt {
    let result = super.call(
      "minimumCurationDeposit",
      "minimumCurationDeposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumCurationDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumCurationDeposit",
      "minimumCurationDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    _subgraphDeploymentID: Bytes,
    _tokensIn: BigInt,
    _signalOutMin: BigInt
  ): Curation__mintResult {
    let result = super.call(
      "mint",
      "mint(bytes32,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
        ethereum.Value.fromUnsignedBigInt(_tokensIn),
        ethereum.Value.fromUnsignedBigInt(_signalOutMin)
      ]
    );

    return new Curation__mintResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_mint(
    _subgraphDeploymentID: Bytes,
    _tokensIn: BigInt,
    _signalOutMin: BigInt
  ): ethereum.CallResult<Curation__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(bytes32,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
        ethereum.Value.fromUnsignedBigInt(_tokensIn),
        ethereum.Value.fromUnsignedBigInt(_signalOutMin)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Curation__mintResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  pools(param0: Bytes): Curation__poolsResult {
    let result = super.call(
      "pools",
      "pools(bytes32):(uint256,uint32,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Curation__poolsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_pools(param0: Bytes): ethereum.CallResult<Curation__poolsResult> {
    let result = super.tryCall(
      "pools",
      "pools(bytes32):(uint256,uint32,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Curation__poolsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  signalToTokens(_subgraphDeploymentID: Bytes, _signalIn: BigInt): BigInt {
    let result = super.call(
      "signalToTokens",
      "signalToTokens(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
        ethereum.Value.fromUnsignedBigInt(_signalIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_signalToTokens(
    _subgraphDeploymentID: Bytes,
    _signalIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "signalToTokens",
      "signalToTokens(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
        ethereum.Value.fromUnsignedBigInt(_signalIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensToSignal(
    _subgraphDeploymentID: Bytes,
    _tokensIn: BigInt
  ): Curation__tokensToSignalResult {
    let result = super.call(
      "tokensToSignal",
      "tokensToSignal(bytes32,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
        ethereum.Value.fromUnsignedBigInt(_tokensIn)
      ]
    );

    return new Curation__tokensToSignalResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_tokensToSignal(
    _subgraphDeploymentID: Bytes,
    _tokensIn: BigInt
  ): ethereum.CallResult<Curation__tokensToSignalResult> {
    let result = super.tryCall(
      "tokensToSignal",
      "tokensToSignal(bytes32,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(_subgraphDeploymentID),
        ethereum.Value.fromUnsignedBigInt(_tokensIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Curation__tokensToSignalResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class AcceptProxyCall extends ethereum.Call {
  get inputs(): AcceptProxyCall__Inputs {
    return new AcceptProxyCall__Inputs(this);
  }

  get outputs(): AcceptProxyCall__Outputs {
    return new AcceptProxyCall__Outputs(this);
  }
}

export class AcceptProxyCall__Inputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptProxyCall__Outputs {
  _call: AcceptProxyCall;

  constructor(call: AcceptProxyCall) {
    this._call = call;
  }
}

export class AcceptProxyAndCallCall extends ethereum.Call {
  get inputs(): AcceptProxyAndCallCall__Inputs {
    return new AcceptProxyAndCallCall__Inputs(this);
  }

  get outputs(): AcceptProxyAndCallCall__Outputs {
    return new AcceptProxyAndCallCall__Outputs(this);
  }
}

export class AcceptProxyAndCallCall__Inputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }

  get _proxy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AcceptProxyAndCallCall__Outputs {
  _call: AcceptProxyAndCallCall;

  constructor(call: AcceptProxyAndCallCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _signalIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _tokensOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bondingCurve(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _defaultReserveRatio(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _curationTaxPercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minimumCurationDeposit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _subgraphDeploymentID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _tokensIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _signalOutMin(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetCurationTaxPercentageCall extends ethereum.Call {
  get inputs(): SetCurationTaxPercentageCall__Inputs {
    return new SetCurationTaxPercentageCall__Inputs(this);
  }

  get outputs(): SetCurationTaxPercentageCall__Outputs {
    return new SetCurationTaxPercentageCall__Outputs(this);
  }
}

export class SetCurationTaxPercentageCall__Inputs {
  _call: SetCurationTaxPercentageCall;

  constructor(call: SetCurationTaxPercentageCall) {
    this._call = call;
  }

  get _percentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCurationTaxPercentageCall__Outputs {
  _call: SetCurationTaxPercentageCall;

  constructor(call: SetCurationTaxPercentageCall) {
    this._call = call;
  }
}

export class SetDefaultReserveRatioCall extends ethereum.Call {
  get inputs(): SetDefaultReserveRatioCall__Inputs {
    return new SetDefaultReserveRatioCall__Inputs(this);
  }

  get outputs(): SetDefaultReserveRatioCall__Outputs {
    return new SetDefaultReserveRatioCall__Outputs(this);
  }
}

export class SetDefaultReserveRatioCall__Inputs {
  _call: SetDefaultReserveRatioCall;

  constructor(call: SetDefaultReserveRatioCall) {
    this._call = call;
  }

  get _defaultReserveRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDefaultReserveRatioCall__Outputs {
  _call: SetDefaultReserveRatioCall;

  constructor(call: SetDefaultReserveRatioCall) {
    this._call = call;
  }
}

export class SetMinimumCurationDepositCall extends ethereum.Call {
  get inputs(): SetMinimumCurationDepositCall__Inputs {
    return new SetMinimumCurationDepositCall__Inputs(this);
  }

  get outputs(): SetMinimumCurationDepositCall__Outputs {
    return new SetMinimumCurationDepositCall__Outputs(this);
  }
}

export class SetMinimumCurationDepositCall__Inputs {
  _call: SetMinimumCurationDepositCall;

  constructor(call: SetMinimumCurationDepositCall) {
    this._call = call;
  }

  get _minimumCurationDeposit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumCurationDepositCall__Outputs {
  _call: SetMinimumCurationDepositCall;

  constructor(call: SetMinimumCurationDepositCall) {
    this._call = call;
  }
}
